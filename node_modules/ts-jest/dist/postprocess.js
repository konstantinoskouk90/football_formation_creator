"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var jestPreset = require("babel-preset-jest");
var babel = require("babel-core");
function createBabelTransformer(options) {
    options = __assign({}, options, { plugins: (options && options.plugins) || [], presets: ((options && options.presets) || []).concat([jestPreset]), retainLines: true, sourceMaps: 'inline' });
    delete options.cacheDirectory;
    delete options.filename;
    return function (src, filename, config, transformOptions) {
        var theseOptions = Object.assign({ filename: filename }, options);
        if (transformOptions && transformOptions.instrument) {
            theseOptions.auxiliaryCommentBefore = ' istanbul ignore next ';
            theseOptions.plugins = theseOptions.plugins.concat([
                [
                    require('babel-plugin-istanbul').default,
                    {
                        cwd: config.rootDir,
                        exclude: [],
                    },
                ],
            ]);
        }
        return babel.transform(src, theseOptions).code;
    };
}
exports.getPostProcessHook = function (tsCompilerOptions, jestConfig, tsJestConfig) {
    if (tsJestConfig.skipBabel) {
        return function (src) { return src; };
    }
    var plugins = [];
    if (tsCompilerOptions.allowSyntheticDefaultImports) {
        plugins.push('transform-es2015-modules-commonjs');
    }
    return createBabelTransformer({
        presets: [],
        plugins: plugins,
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdHByb2Nlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcG9zdHByb2Nlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUlBLDhDQUFnRDtBQUVoRCxrQ0FBb0M7QUFHcEMsZ0NBQWdDLE9BQTZCO0lBQ3pELE9BQU8sZ0JBQ0EsT0FBTyxJQUNWLE9BQU8sRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUMzQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFHbEUsV0FBVyxFQUFFLElBQUksRUFHakIsVUFBVSxFQUFFLFFBQVEsR0FDdkIsQ0FBQztJQUNGLE9BQU8sT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUM5QixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFFeEIsTUFBTSxDQUFDLFVBQUMsR0FBVyxFQUNmLFFBQWdCLEVBQ2hCLE1BQWtCLEVBQ2xCLGdCQUFrQztRQUNsQyxJQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxVQUFBLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxRCxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2xELFlBQVksQ0FBQyxzQkFBc0IsR0FBRyx3QkFBd0IsQ0FBQztZQUUvRCxZQUFZLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2dCQUMvQztvQkFDSSxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxPQUFPO29CQUN4Qzt3QkFFSSxHQUFHLEVBQUUsTUFBTSxDQUFDLE9BQU87d0JBQ25CLE9BQU8sRUFBRSxFQUFFO3FCQUNkO2lCQUNKO2FBQ0osQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDbkQsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVZLFFBQUEsa0JBQWtCLEdBQUcsVUFBQyxpQkFBa0MsRUFBRSxVQUFzQixFQUFFLFlBQWlCO0lBQzVHLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEdBQUcsRUFBSCxDQUFHLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUVuQixFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7UUFDakQsT0FBTyxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFHRCxNQUFNLENBQUMsc0JBQXNCLENBQUM7UUFDMUIsT0FBTyxFQUFFLEVBQUU7UUFDWCxPQUFPLEVBQUUsT0FBTztLQUNuQixDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMifQ==